# Começo do projeto

1. Criar o ambiente VITE
2. Limpar o Vite (assets e arquivos css)
3. Instalar Styled Components e @types/styled-Components
4. Criar o tema default.ts (com o styled.d.ts numa pasta @types) e também o arquivo global.ts com config css global da aplicação
5. Configurar o themeprovider no App.tsx
6. Configurações globais de estilo no global.ts
7. Criação de pasta pages com a page principal + criação pasta components 

RADIX - COMPONENTES COM ACESSIBILIDADE

* npm install @radix-ui/react-dialog
* Instala componentes de pop-up, caixas de diálogo, que são trabalhosos de
  criar com html puro;
* E eles já vem com acessibilidade implementada
* Esses componentes são instalados sozinhos, um por um. Para não onerar o setup
* Ex para instalar o dialog: npm install @radix-ui/react-dialog
* Instalando radio group: npm i @radix-ui/react-radio-group

JSON SERVER

* Simulação de uma API real
* npm i json-server -D
* Você cria um arquivo na raiz chamado server.json
* E cada linha colocada no arquivo é como se fosse uma entidade. Ex: { "Transactions" : [] }
* Para executar o servidor json, use: npx json-server nomeDoSeuArquivo.json
* No caso, o endpoint http://localhost:3000/Transactions vai servir para requisitar e retornar
  o vetor de Transactions
* Se precisar especificar a porta que vai executar o server-json ou dar delay para simulação real (500 milisegundos) :
  * npx json-server nomeDoSeuArquivo.json -p 3343 -d 500
* Você pode listar recursos na api:
  * http://localhost:3000/Transactions/1
* Pode filtrar ordenando por data:
  * http://localhost:3000/Transactions?_sort=createdAt
* Buscar um valor especifico para atributo:
  * http://localhost:3000/Transactions?id=2
* Consultas por texto no geral:
    http://localhost:3000/Transactions?q==Ti (busca não funcionou mas acho que deve ter sido
    substituida por outro formato)

INSTALANDO BIBLIOTECA ZOD PARA VALIDAR FORMULÁRIOS

* npm i react-hook-form zod
* npm i @hookform/resolvers

INSTALANDO AXIOS

* npm i axios
* Para configurar o axios crie uma pasta 'lib' em src e depois crie arquivo axios.ts

INSTALANDO O USE-CONTEXT-SELECTOR

* npm i use-context-selector scheduler
* scheduler é outra biblioteca quue a use-context-selector depende
* para usar, você tem que apagar a importação de createContext do react e importar agora o createContext 
  da use-context-selector => lá no seu contexto
  => os componentes que tiverem usando useContext agora você muda para useContextSelector

** parei na aula de useCallback. Vá para lá.